<?php
namespace api\modules\v1\controllers;

use common\models\User;
use Yii;
use yii\base\Exception;
use yii\helpers\FileHelper;
use yii\helpers\Json;
use yii\rest\Controller;

class BaseApiController extends Controller
{

    const STATUS_DELETED = 0;
    const STATUS_ACTIVE = 10;
    Const active = 'active' ;
    Const inactive= 'inactive' ;
    Const blocked= 'blocked';
    Const deleted = 'deleted';
    var $region;
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

        switch (Yii::$app->request->getMethod()){
            case 'GET' :
                $this->region = Yii::$app->request->get('region');
                break;
            case 'POST' :
                $this->region = Yii::$app->request->post('region');
                break;
            default :
                $this->region = \Yii::$app->params['region'];
                break;
        }
        \Yii::$app->params['region'] = $this->region;
    }

    /**
     * @apiDefine AUTH
     * @apiHeader {String} AUTH_TOKEN Users unique access-key.
     * @apiParam {integer="en","ar"} language
     *
     * @apiHeaderExample {json} Header Example:
     *     {
     *       "AUTH_TOKEN": "[HASH]"
     *     }
     */

    /**
     * @apiDefine Response
     *
     * @apiSuccess {String} message success message
     * @apiSuccessExample Success-Response:
     *     HTTP/1.1 200 OK
     *     {
     *       "errorStatus" : false,
     *       "message" : "success message",
     *       "data" : {
     *          {"key" : "value"},
     *       }
     *     }
     *
     * @apiErrorExample Error-Response:
     *     HTTP/1.1 200 ok
     *     {
     *       "errorStatus": true,
     *       "code": error code,
     *       "message": "error message"
     *     }
     */

    // Members
    /**
     * Key which has to be in HTTP USERNAME and PASSWORD headers
     */
    Const APPLICATION_ID = 'ASCCPE';
    /** @var User $user */
    public $user;

    /**
     * Default response format
     * either 'json' or 'xml'
     */
    public function actionError()
    {
        $return_value = array("status" => false, "message" => "Action not found.");
        $this->_sendResponse(200, '{ "d" :' . json_encode($return_value) . '}');
    }

    public function render($view, $params = [])
    {
        return parent::render($view, $params); // TODO: Change the autogenerated stub
    }

    function __clone()
    {
        // TODO: Implement __clone() method.
    }

    private $format = 'json';

    /**
     * @return array action filters
     */

    public function filters()
    {
        return array();
    }

    /**
     * Gets the message for a status code
     *
     * @param mixed $status
     * @access private
     * @return string
     */
    protected function _getStatusCodeMessage($status)
    {
// these could be stored in a .ini file and loaded
// via parse_ini_file()... however, this will suffice
// for an example
        $codes = Array(
            100 => 'Continue',
            101 => 'Switching Protocols',
            200 => 'OK',
            201 => 'Created',
            202 => 'Accepted',
            203 => 'Non-Authoritative Information',
            204 => 'No Content',
            205 => 'Reset Content',
            206 => 'Partial Content',
            300 => 'Multiple Choices',
            301 => 'Moved Permanently',
            302 => 'Found',
            303 => 'See Other',
            304 => 'Not Modified',
            305 => 'Use Proxy',
            306 => '(Unused)',
            307 => 'Temporary Redirect',
            400 => 'Bad Request',
            401 => 'Unauthorized',
            402 => 'Payment Required',
            403 => 'Forbidden',
            404 => 'Not Found',
            405 => 'Method Not Allowed',
            406 => 'Not Acceptable',
            407 => 'Proxy Authentication Required',
            408 => 'Request Timeout',
            409 => 'Conflict',
            410 => 'Gone',
            411 => 'Length Required',
            412 => 'Precondition Failed',
            413 => 'Request Entity Too Large',
            414 => 'Request-URI Too Long',
            415 => 'Unsupported Media Type',
            416 => 'Requested Range Not Satisfiable',
            417 => 'Expectation Failed',
            500 => 'Internal Server Error',
            501 => 'Not Implemented',
            502 => 'Bad Gateway',
            503 => 'Service Unavailable',
            504 => 'Gateway Timeout',
            505 => 'HTTP Version Not Supported'
        );
        return (isset($codes[$status])) ? $codes[$status] : '';
    }

    // helper functions

    /**
     * @param int $status
     * @param string $filePath
     * @param string $content_type
     */
    protected function _sendFileResponse($status = 200, $filePath = '', $content_type = 'application/pdf')
    {
        if (!empty($filePath)) {
            header("Content-type:$content_type");
            header('Content-Disposition: attachment; filename="' . basename($filePath) . '"');
            header('Content-Length: ' . filesize($filePath));
            readfile($filePath);
            Yii::$app->end($status, false);
        }
    }

    /**
     * @param string $body
     * @param string $message
     * @param int $isError
     */
    protected function _logResponse($body = [], $message = '', $http_status = 200)
    {
        $content_type = 'text/json';
        $status_header = 'HTTP/1.1 ' . $http_status . ' ' . $this->_getStatusCodeMessage($http_status);
        header($status_header);
        header('Content-type: ' . $content_type);

        if (!is_array($body)) {
            $body = array('message' => $body);
            $body = array_merge(array("status" => true), $body);
        }

        $body = Json::encode([
            "errorStatus" => false,
            "data" => $body,
            "timestamp" => time(),
            'message' => $message
        ]);


        Yii::$app->end($http_status, false);
    }

    /**
     * @param string $body
     * @param string $message
     * @param int $isError
     */
    protected function _sendResponse($body = [], $message = '', $http_status = 200)
    {
       // print_r($body);
      //  die();
        $content_type = 'text/json';
        $status_header = 'HTTP/1.1 ' . $http_status . ' ' . $this->_getStatusCodeMessage($http_status);
        header($status_header);
        header('Content-type: ' . $content_type);

        if (!is_array($body)) {

            $body = array('message' => $body);
            $body = array_merge(array("status" => true), $body);
        }

        $body = Json::encode([
            "errorStatus" => false,
            "data" => $body,
            "timestamp" => time(),
          //  "region" => $this->region,
            'message' => $message
        ]);


        echo $body;
       // die;

        Yii::$app->end($http_status, false);
    }

    /**
     * @param int $status
     * @param mixed $customMessage
     * @param mixed $errorCode
     * @param string $contentType
     */
    protected function _sendErrorResponse($status = 400, $customMessage = null, $errorCode = null, $contentType = 'text/json')
    {
        $message = $this->_getStatusCodeMessage($status);
        $status_header = 'HTTP/1.1 ' . $status . ' ' . $this->_getStatusCodeMessage($status);

        if ($customMessage !== null) {
            $message .= ". " . $customMessage;
        }

        header($status_header);
        header('Content-type: ' . $contentType);

        if ($errorCode === null) {
            $code = $status;
        } else {
            $message = $customMessage;
            $code = $errorCode;
        }

        $body = Json::encode(
            array(
                "errorStatus" => true,
                "code" => $code,
                'message' => $message
            )
        );

        echo $body;
        Yii::getLogger()->log("code: $code, message: $message", 'error');

        Yii::$app->end($status, false);
    }

    protected function _checkAuth()
    {
        if (!isset($_SERVER['HTTP_AUTH_TOKEN'])) {
            // Error: Unauthorized
            $this->_sendErrorResponse(401);
        }

        try {
            $token = $_SERVER['HTTP_AUTH_TOKEN'];

          //  $this->user = User::findIdentityByAccessToken($token);
            $this->user = User::findIdentityByAuthKey(($token));

            if ($this->user == null) {
                $this->_sendErrorResponse(401);
            }
            //echo $this->user->status;
           // exit;
           /* if ($this->user->status == User::inactive) {

                $this->_sendErrorResponse(423, "The user is banned.");
            }
            if ($this->user->status == User::blocked) {

                $this->_sendErrorResponse(423, "The user is banned.");

            }
            if ($this->user->status == User::deleted) {

                $this->_sendErrorResponse(423, "The user is banned.");

            }*/

            return $this->user;
        } catch (Exception $e) {
            $this->_sendErrorResponse(400);
        }
        return false;
    }


    protected function _checkEmail()
    {
        try {
            if (!isset($this->user)) {
                // Error: Unauthorized
                $this->_sendErrorResponse(401);
            }
            if (!$this->user->isEmailActive()) {
                $this->_sendErrorResponse(403); //"To enjoy the full ViRVi experience, please activate your account by clicking on the link sent to your email address:"
            }
            return true;
        } catch (Exception $e) {
            $this->_sendErrorResponse(400);
        }
        return false;
    }

    /**
     * Generates new token
     */
    protected function _generateToken()
    {
        return Yii::$app->security->generateRandomString() . '_' . time();
    }

    protected function _getUserID()
    {
        $token = $_SERVER['HTTP_AUTH_TOKEN'];

        return $this->_getTokenCache($token);
    }

//    protected function _getTokenByUserID($userID) {
//        return $this->_getTokenCache($userID);
//    }
    protected function _userMembershipData($usermembership){
        $data = $usermembership->toArray();
       // unset($data['created_at']);
       // unset($data['updated_at']);
        unset($data['user_id']);
        unset($data['membership_type_id']);
        unset($data['payment_method']);
        unset($data['source']);
        unset($data['source_id"']);
        unset($data['start_date"']);
        return $data;
    }
    protected function _userData(User $user)
    {
        $data = $user->toArray();

       //$data['expiry_date'] = $user->userMemberships->end_date;
       //$data['days_left'] = $user->userMemberships->days_left;
        //$user->with('userMemberships')->end_date;
//        $data['days_left'] = $user->calculateDaysLeft();
        //$data['expiry_date'] =$user->userMemberships[0]['end_date'];
      // $data['days_left']=$user->userMemberships[0]['days_left'];


        /*
         * Remove fbId from data for security purposes
         */

        unset($data['auth_key']);
        unset($data['access_token']);
        unset($data['password_hash']);
        //unset($data['active_token']);
       // unset($data['reset_token']);
        unset($data['activate_token']);
        unset($data['password_reset_token']);
      //  unset($data['created_at']);
       // unset($data['updated_at']);

        return $data;
    }

    protected function _saveTokenCache1($id)
    {
        $cache = Yii::$app->cache;
        $token = $this->_generateToken();
        $cache->set($token, $id, 0);
        return $token;
    }

    protected function _getTokenCache($token)
    {
        $cache = Yii::$app->cache;
        return $cache->get($token);
    }

    protected function _getToken()
    {
        return $_SERVER['HTTP_AUTH_TOKEN'];
    }

    protected function convertToArray($objectList)
    {
        $response = array();

        foreach ($objectList as $object) {
            $response[] = $object;
        }
        return $response;
    }

    /**
     * @param string $name
     * @param array $params
     * @return mixed
     */
    public function __call($name, $params)
    {
        return parent::__call($name, $params); // TODO: Change the autogenerated stub
    }

    function calculateDistance($latitude1, $longitude1, $latitude2, $longitude2) {
        $theta = $longitude1 - $longitude2;
        $miles = (sin(deg2rad($latitude1)) * sin(deg2rad($latitude2))) + (cos(deg2rad($latitude1)) * cos(deg2rad($latitude2)) * cos(deg2rad($theta)));
        $miles = acos($miles);
        $miles = rad2deg($miles);
        $miles = $miles * 60 * 1.1515;
        return $miles;
    }


}
